#include <string>
#include <vector>
#include <uussmlmodels/associators/phaseLink/inference.hpp>
#include <uussmlmodels/associators/phaseLink/pick.hpp>
#include <uussmlmodels/associators/phaseLink/arrival.hpp>
#include <gtest/gtest.h>

using namespace UUSSMLModels::Associators::PhaseLink;

namespace
{
std::string utahModel{"/home/bbaker/Codes/mlmodels/associators/phaseLink/models/utah.onnx"};

Pick toPick(int64_t identifier,
            const std::string &network,
            const std::string &station,
            const std::string &phase,
            const double time)
{
    Pick pick;
    pick.setIdentifier(identifier);
    pick.setNetwork(network);
    pick.setStation(station);
    pick.setTime(time);
    Pick::Phase iPhase{Pick::Phase::P};
    if (phase == "S"){iPhase = Pick::Phase::S;}
    pick.setPhase(iPhase);
    return pick;
}

std::vector<Pick> picksFor60000197() // Blast
{
    std::vector<Pick> picks{
        ::toPick(0, "UU", "CWU", "P", 1349131125.0860946),
        ::toPick(1, "UU", "MID", "P", 1349131125.1194382),
        ::toPick(2, "UU", "NOQ", "P", 1349131126.8506584),
        ::toPick(3, "UU", "WTU", "P", 1349131127.3981037),
        ::toPick(4, "UU", "GMU", "P", 1349131129.748004),
        ::toPick(5, "UU", "SAIU", "P", 1349131130.4178166),
        ::toPick(6, "UU", "RBU", "P", 1349131131.920422),
        ::toPick(7, "UU", "SNUT", "P", 1349131133.02),
        ::toPick(8, "UU", "DCU", "P", 1349131133.35),
        ::toPick(9, "UU", "NAIU", "P", 1349131133.38),
        ::toPick(10, "UU", "WMUT", "P", 1349131133.7190835),
        ::toPick(11, "UU", "NLU", "P", 1349131134.5819006),
        ::toPick(12, "UU", "JLU", "P", 1349131134.6785064),
        ::toPick(13, "US", "DUG", "P", 1349131135.1472971),
        ::toPick(14, "UU", "HLJ", "P", 1349131135.337707),
        ::toPick(15, "UU", "FPU", "P", 1349131135.5393994),
        ::toPick(16, "UU", "SUU", "P", 1349131136.976498),
        ::toPick(17, "UU", "RRCU", "P", 1349131137.23),
        ::toPick(18, "UU", "DAU", "P", 1349131137.767431),
        ::toPick(19, "UU", "SPU", "P", 1349131139.3414888),
        ::toPick(20, "UU", "GZU", "P", 1349131141.606655),
        ::toPick(21, "UU", "WVUT", "P", 1349131145.3714025),
        ::toPick(22, "UU", "FSU", "P", 1349131146.911738),
        ::toPick(23, "UU", "SNO", "P", 1349131149.0277183)
    };
    return picks;
}

std::vector<Pick> picksFor60020494()
{
    std::vector<Pick> picks{
        ::toPick(0, "UU", "LKC", "P", 1585367088.777456),
        ::toPick(1, "UU", "NOQ", "P", 1585367089.547289),
        ::toPick(2, "UU", "SAIU", "P", 1585367089.781379),
        ::toPick(3, "UU", "COY", "P", 1585367090.3085065),
        ::toPick(4, "UU", "HRU", "P", 1585367090.309672),
        ::toPick(5, "UU", "LKC", "S", 1585367090.4001718),
        ::toPick(6, "UU", "RBU", "P", 1585367091.1090257),
        ::toPick(7, "UU", "NOQ", "S", 1585367091.5950766),
        ::toPick(8, "UU", "COY", "S", 1585367092.4293108),
        ::toPick(9, "UU", "MID", "P", 1585367092.459963),
        ::toPick(10, "UU", "NAIU", "P", 1585367092.547398)
    };
    return picks;
}

std::vector<Pick> realLife()
{
    std::vector<Pick> picks{
/*
::toPick(1,"UU","SAIU","P",1723744920.0115),
::toPick(2,"UU","WCF","P",1723744920.2275),
::toPick(3,"UU","JVW2","S",1723744920.2626),
::toPick(4,"UU","LRG","S",1723744920.9129),
::toPick(5,"UU","CAP2","S",1723744921.2193),
::toPick(6,"UU","WES","P",1723744921.2349),
::toPick(7,"UU","HER","P",1723744921.2648),
::toPick(8,"UU","OCP","P",1723744921.5437),
::toPick(9,"UU","PCR","P",1723744921.8913),
::toPick(10,"UU","SWUT","P",1723744921.9592),
::toPick(11,"UU","SNUT","P",1723744922.2589),
::toPick(12,"UU","KCBD","P",1723744922.7044),
::toPick(13,"UU","SPR2","S",1723744922.7262),
::toPick(14,"UU","LRG","S",1723744922.8369),
::toPick(15,"UU","WCO","S",1723744923.0639),
::toPick(16,"UU","DOT","S",1723744923.1409),
::toPick(17,"US","HWUT","P",1723744924.7005),
::toPick(18,"UU","TCU","P",1723744924.8328),
::toPick(19,"UU","WCF","S",1723744925.2082),
::toPick(20,"UU","WES","P",1723744925.9134),
::toPick(21,"UU","BCS","P",1723744926.5032),
::toPick(22,"UU","SPS","P",1723744926.762),
::toPick(23,"UU","WCF","P",1723744926.8811),
::toPick(24,"UU","SHED","P",1723744926.9716),
::toPick(25,"UU","SZCU","P",1723744927.0279),
::toPick(26,"UU","BSS","S",1723744928.2062),
::toPick(27,"UU","OPS","S",1723744928.7881),
::toPick(28,"UU","GAWY","S",1723744928.8934),
::toPick(29,"UU","SZCU","S",1723744928.9391),
::toPick(30,"UU","JVW2","S",1723744928.9831),
::toPick(31,"UU","TRS","P",1723744929.145),
::toPick(32,"UU","SNUT","P",1723744929.4357),
::toPick(33,"UU","BCE","P",1723744929.5449),
::toPick(34,"UU","SCY","S",1723744930.8431),
::toPick(35,"UU","CAP2","S",1723744931.2632),
::toPick(36,"UU","SAIU","P",1723744931.4937),
::toPick(37,"UU","TPU","S",1723744931.5648),
::toPick(38,"UU","SGU","P",1723744931.8121),
::toPick(39,"UU","ALP","S",1723744931.9769),
::toPick(40,"UU","ZNPU","P",1723744932.2692),
::toPick(41,"UU","SNUT","P",1723744932.5245),
::toPick(42,"UU","MLI","P",1723744932.6061),
::toPick(43,"UU","CCPU","S",1723744932.6339),
::toPick(44,"UU","RCJ","P",1723744932.6438),
::toPick(45,"UU","WHS","P",1723744932.9371),
::toPick(46,"UU","SNUT","P",1723744933.6655),
::toPick(47,"UU","NPI","P",1723744934.017),
::toPick(48,"UU","OPS","P",1723744934.1859),
::toPick(49,"UU","GAWY","P",1723744934.2764),
::toPick(50,"UU","GMO","P",1723744934.3495),
::toPick(51,"UU","GMO","S",1723744934.4411),
::toPick(52,"UU","LMUT","S",1723744934.5138),
::toPick(53,"UU","FORK","S",1723744934.656),
::toPick(54,"UU","SNUT","P",1723744934.7001),
::toPick(55,"UU","JRP","P",1723744934.881),
::toPick(56,"UU","SPR2","S",1723744935.1408),
::toPick(57,"UU","SCS","P",1723744935.2437),
::toPick(58,"UU","WCO","P",1723744935.9824),
::toPick(59,"UU","LCU","S",1723744936.2701),
::toPick(60,"UU","CVH","S",1723744936.3583),
::toPick(61,"UU","RCJ","S",1723744936.6252),
::toPick(62,"UU","PEUT","S",1723744937.1684),
::toPick(63,"UU","WES","P",1723744937.2395),
::toPick(64,"UU","SPS","P",1723744937.5159),
::toPick(65,"UU","SNUT","P",1723744937.6678),
::toPick(66,"UU","ALP","S",1723744937.8048),
::toPick(67,"UU","SCS","S",1723744937.861),
::toPick(68,"UU","GMU","S",1723744938.098),
::toPick(69,"UU","HAFB","P",1723744938.2188),
::toPick(70,"UU","MMU","S",1723744938.2201),
::toPick(71,"UU","LKC","S",1723744938.4521),
::toPick(72,"UU","HTU","P",1723744938.582),
::toPick(73,"UU","GMU","P",1723744939.4092),
::toPick(74,"UU","OPS","S",1723744939.4667),
::toPick(75,"UU","SNUT","P",1723744939.7835),
::toPick(76,"UU","GMU","S",1723744940.2597),
::toPick(77,"UU","WES","S",1723744940.9999),
::toPick(78,"UU","HMU","S",1723744941.0565),
::toPick(79,"UU","HRU","S",1723744941.4548),
::toPick(80,"UU","SPR2","S",1723744941.8911),
::toPick(81,"UU","ICU","P",1723744942.373),
::toPick(82,"UU","SNUT","P",1723744942.3845),
::toPick(83,"UU","DCM","P",1723744942.5409),
::toPick(84,"UU","SCUT","S",1723744942.5905),
::toPick(85,"UU","BYP","P",1723744942.6138),
::toPick(86,"UU","MGCU","P",1723744943.0274),
::toPick(87,"UU","JRP","S",1723744943.0769),
::toPick(88,"UU","WCF","P",1723744943.1431),
::toPick(89,"UU","PEUT","S",1723744943.1762),
::toPick(90,"UU","ALP","S",1723744944.0394),
::toPick(91,"UU","WTU","S",1723744944.2411),
::toPick(92,"UU","TRS","S",1723744944.8832),
::toPick(93,"UU","RRCU","P",1723744945.1004),
::toPick(94,"UU","WHS","P",1723744945.7305),
::toPick(95,"UU","MOR","P",1723744946.0085),
::toPick(96,"UU","DOT","S",1723744946.6162),
::toPick(97,"UU","HAFB","P",1723744946.7608),
::toPick(98,"UU","CVH","P",1723744947.0479),
::toPick(99,"UU","LTU","P",1723744947.653),
::toPick(100,"UU","UHP","P",1723744947.7841),
::toPick(101,"UU","WVUT","P",1723744948.4911),
::toPick(102,"UU","SCY","P",1723744948.6226),
::toPick(103,"UU","LRG","S",1723744948.9198),
::toPick(104,"UU","UHP","P",1723744949.0711),
::toPick(105,"UU","SCS","P",1723744950.1248),
::toPick(106,"UU","MGCU","S",1723744950.6337),
::toPick(107,"UU","OPS","S",1723744950.8509),
::toPick(108,"UU","SCUT","S",1723744951.2656),
::toPick(109,"UU","WPUT","P",1723744951.2916),
::toPick(110,"UU","NPI","P",1723744951.4816),
::toPick(111,"UU","SCS","P",1723744951.5753),
::toPick(112,"UU","JVW2","S",1723744951.898),
::toPick(113,"UU","WES","S",1723744952.0459),
::toPick(114,"UU","EPU","P",1723744952.3192),
::toPick(115,"UU","GMO","S",1723744952.3738),
::toPick(116,"UU","SNUT","P",1723744952.3781),
::toPick(117,"UU","ELE","P",1723744952.7298),
::toPick(118,"UU","AMF","S",1723744952.7634),
::toPick(119,"UU","SCS","S",1723744953.2495),
::toPick(120,"UU","HTU","P",1723744953.4058),
::toPick(121,"UU","MOR","S",1723744953.6297),
::toPick(122,"UU","SSC","S",1723744954.129),
::toPick(123,"UU","ALT","P",1723744954.2616),
::toPick(124,"UU","WES","S",1723744954.3613),
::toPick(125,"UU","DOT","P",1723744954.4697),
::toPick(126,"UU","SCS","P",1723744955.1267),
::toPick(127,"UU","WCO","S",1723744955.1283),
::toPick(128,"UU","AMF","S",1723744955.6176),
::toPick(129,"UU","ALT","S",1723744955.6764),
::toPick(130,"UU","HAFB","P",1723744955.773),
::toPick(131,"UU","LGC","S",1723744955.8166),
::toPick(132,"UU","LRG","S",1723744956.0091),
::toPick(133,"UU","WES","S",1723744956.6845),
::toPick(134,"UU","ELE","S",1723744956.8483),
::toPick(135,"UU","HTU","P",1723744956.9596),
*/
::toPick(136,"UU","KNB","P",1723744957.1161),
::toPick(137,"UU","HER","S",1723744957.1619),
::toPick(138,"UU","HDUT","S",1723744958.1512),
::toPick(139,"UU","MMU","S",1723744958.1868),
::toPick(140,"UU","PCR","P",1723744958.928),
::toPick(141,"UU","KNB","S",1723744958.9362),
::toPick(142,"UU","HER","S",1723744959.2239),
::toPick(143,"UU","ROA","P",1723744959.2322),
::toPick(144,"UU","HER","P",1723744959.4175),
::toPick(145,"UU","BCE","P",1723744959.4329),
::toPick(146,"UU","ETW","P",1723744959.4716),
::toPick(147,"UU","SAIU","P",1723744959.6356),
::toPick(148,"UU","SNUT","P",1723744959.7729),
::toPick(149,"UU","NPI","P",1723744959.8095),
::toPick(150,"UU","CVH","P",1723744959.8168),
::toPick(151,"UU","ALT","S",1723744959.8404),
::toPick(152,"UU","KCBD","P",1723744959.9413),
::toPick(153,"UU","CVH","S",1723744960.3292),
::toPick(154,"UU","EKU","P",1723744960.3867),
::toPick(155,"UU","SNUT","P",1723744960.8086),
::toPick(156,"UU","EKU","S",1723744961.1226),
::toPick(157,"UU","LCMT","P",1723744961.3114),
::toPick(158,"UU","ZNPU","P",1723744961.9824),
::toPick(159,"UU","ICU","P",1723744962.0339),
::toPick(160,"UU","HHS","S",1723744962.4869),
::toPick(161,"UU","LCU","S",1723744962.6987),
::toPick(162,"UU","BCS","S",1723744962.8569),
::toPick(163,"UU","PCR","S",1723744963.1537),
::toPick(164,"UU","NPI","P",1723744963.2347),
::toPick(165,"UU","EOCU","S",1723744963.5834),
::toPick(166,"UU","CAP2","S",1723744963.7455),
::toPick(167,"UU","KCBD","S",1723744963.8607),
::toPick(168,"UU","SNUT","P",1723744963.9199),
::toPick(169,"UU","WCF","P",1723744964.0214),
::toPick(170,"UU","ALT","P",1723744964.098),
::toPick(171,"UU","ALT","S",1723744964.1551),
::toPick(172,"UU","AVE","P",1723744964.4589),
::toPick(173,"UU","EKU","S",1723744964.6988),
::toPick(174,"UU","SNUT","P",1723744964.9843),
::toPick(175,"UU","PEUT","P",1723744965.0879),
::toPick(176,"UU","BHU","P",1723744965.2075),
::toPick(177,"UU","SZCU","P",1723744965.3567),
::toPick(178,"UU","HES","S",1723744965.4713),
::toPick(179,"UU","VNL","P",1723744965.5095),
::toPick(180,"UU","WCO","S",1723744965.6516),
::toPick(181,"UU","REUT","S",1723744965.8213),
::toPick(182,"UU","LCMT","S",1723744965.957),
::toPick(183,"UU","WDO","P",1723744966.2228),
::toPick(184,"UU","SPR2","S",1723744966.4125),
::toPick(185,"UU","PTU","P",1723744966.6543),
::toPick(186,"US","HWUT","P",1723744966.8336),
::toPick(187,"UU","CCUT","P",1723744966.9592),
::toPick(188,"UU","ZNPU","S",1723744967.3038),
::toPick(189,"UU","TPU","P",1723744967.4842),
::toPick(190,"UU","NOQ","S",1723744967.5994),
::toPick(191,"UU","HHS","S",1723744967.9311),
::toPick(192,"UU","MAB","S",1723744968.6368),
::toPick(193,"UU","EOCU","P",1723744969.839),
::toPick(194,"UU","SCY","P",1723744970.246),
::toPick(195,"UU","ELE","S",1723744970.62),
::toPick(196,"UU","UHP","S",1723744970.6359),
::toPick(197,"UU","IAE","S",1723744970.8),
::toPick(198,"UU","ARUT","P",1723744971.017),
::toPick(199,"UU","ICU","P",1723744971.199),
::toPick(200,"UU","WCO","P",1723744971.5616),
::toPick(201,"UU","PTU","P",1723744971.7882),
::toPick(202,"UU","VRUT","P",1723744971.7954),
::toPick(203,"UU","CAP2","S",1723744971.9156),
::toPick(204,"UU","TPU","S",1723744971.921),
::toPick(205,"UU","MHS2","S",1723744971.9474),
::toPick(206,"UU","AVE","P",1723744972.0334),
::toPick(207,"UU","ARUT","P",1723744972.2589),
::toPick(208,"UU","BHU","S",1723744972.422),
::toPick(209,"UU","RCJ","S",1723744972.5408),
::toPick(210,"UU","ALP","S",1723744972.7942),
::toPick(211,"UU","WCO","S",1723744972.8056),
::toPick(212,"UU","SZCU","S",1723744973.0079),
::toPick(213,"UU","REUT","S",1723744973.0958),
::toPick(214,"UU","SPR2","S",1723744973.4263),
::toPick(215,"UU","WMUT","P",1723744973.5253),
::toPick(216,"UU","IAE","P",1723744973.6116),
::toPick(217,"UU","PCR","S",1723744973.8443),
::toPick(218,"UU","DWU","P",1723744974.2974),
::toPick(219,"UU","SNUT","P",1723744974.6525),
::toPick(220,"UU","SGSU","S",1723744975.023),
::toPick(221,"UU","IAE","S",1723744975.0604),
::toPick(222,"UU","HRU","P",1723744975.1686),
::toPick(223,"UU","CCPU","S",1723744975.1974),
::toPick(224,"UU","GMO","S",1723744975.2713),
::toPick(225,"UU","MHS2","S",1723744975.3623),
::toPick(226,"UU","CCUT","S",1723744975.4591),
::toPick(227,"UU","MTPU","P",1723744975.5735),
::toPick(228,"UU","ELE","P",1723744976.0424),
::toPick(229,"UU","CVH","P",1723744976.1688),
::toPick(230,"UU","CVH","S",1723744976.7043),
::toPick(231,"UU","SNUT","P",1723744976.8897),
::toPick(232,"UU","MGCU","P",1723744977.5018),
::toPick(233,"UU","JRP","S",1723744977.5423),
::toPick(234,"UU","LTU","P",1723744977.5554),
::toPick(235,"UU","SPR2","S",1723744977.5651),
::toPick(236,"UU","GMO","S",1723744977.5887),
::toPick(237,"UU","SHED","S",1723744978.465),
::toPick(238,"UU","LCU","P",1723744978.5067),
::toPick(239,"UU","LCU","S",1723744978.521),
::toPick(240,"UU","FOR1","P",1723744979.1441),
::toPick(241,"UU","MOR","S",1723744979.7174),
::toPick(242,"UU","LRG","S",1723744979.9032),
::toPick(243,"UU","FORU","P",1723744980.222),
::toPick(244,"UU","BCS","S",1723744980.4384),
::toPick(245,"UU","SCUT","S",1723744980.9157),
::toPick(246,"UU","RCJ","S",1723744980.9419),
::toPick(247,"UU","FORK","P",1723744981.0245),
::toPick(248,"UU","TMU","P",1723744981.051),
::toPick(249,"UU","MHS2","S",1723744981.37),
::toPick(250,"UU","NMU","P",1723744981.3791),
::toPick(251,"UU","ETW","P",1723744981.4559),
::toPick(252,"UU","FORK","S",1723744981.5179),
::toPick(253,"UU","FORU","S",1723744981.5749),
::toPick(254,"UU","HER","P",1723744981.8172),
::toPick(255,"UU","NMU","S",1723744982.4272),
::toPick(256,"UU","LTU","P",1723744982.494),
::toPick(257,"UU","WCO","P",1723744982.5404),
::toPick(258,"UU","MSU","P",1723744983.2374),
::toPick(259,"UU","TPU","P",1723744983.251),
::toPick(260,"UU","VRUT","S",1723744983.4665),
::toPick(261,"UU","RCJ","S",1723744983.5151),
::toPick(262,"UU","HRU","P",1723744983.6567),
::toPick(263,"UU","BHU","P",1723744983.7098),
::toPick(264,"UU","IMU","P",1723744983.75),
::toPick(265,"UU","TCRU","P",1723744983.8973),
::toPick(266,"UU","ZNPU","P",1723744983.9789),
::toPick(267,"UU","LRG","S",1723744984.7251),
::toPick(268,"UU","SNUT","P",1723744984.8402),
::toPick(269,"UU","MMU","P",1723744984.8854),
::toPick(270,"UU","TCRU","S",1723744985.3296),
::toPick(271,"UU","PSUT","P",1723744985.4017),
::toPick(272,"UU","JRP","P",1723744985.4796),
::toPick(273,"UU","TPU","P",1723744985.8031),
::toPick(274,"UU","ELE","S",1723744985.9933),
::toPick(275,"UU","MHS2","P",1723744986.1328),
::toPick(276,"UU","WVUT","P",1723744986.2808),
::toPick(277,"UU","BSS","S",1723744986.6855),
::toPick(278,"UU","SCS","P",1723744986.7603),
::toPick(279,"UU","WHS","P",1723744986.8959),
::toPick(280,"UU","LCU","P",1723744986.9163),
::toPick(281,"UU","SHED","P",1723744986.9335),
::toPick(282,"UU","JVW2","S",1723744987.3794),
::toPick(283,"UU","IAE","P",1723744987.6952),
::toPick(284,"UU","SSC","P",1723744987.8603),
::toPick(285,"UU","WDO","P",1723744987.9756),
::toPick(286,"UU","GMO","P",1723744988.2885),
::toPick(287,"UU","EOCU","S",1723744988.4514),
::toPick(288,"UU","HES","P",1723744988.5297),
::toPick(289,"UU","HMU","P",1723744988.7449),
::toPick(290,"UU","SNUT","P",1723744988.8687),
::toPick(291,"UU","SCUT","P",1723744988.8847),
::toPick(292,"UU","WTU","P",1723744989.0817),
::toPick(293,"UU","MTPU","S",1723744989.9406),
::toPick(294,"UU","LTU","P",1723744990.015),
::toPick(295,"UU","SCUT","P",1723744990.1405),
::toPick(296,"UU","PCR","S",1723744990.9955),
::toPick(297,"UU","SSC","S",1723744991.409),
::toPick(298,"UU","OPS","P",1723744991.6173),
::toPick(299,"UU","WES","P",1723744992.2091),
::toPick(300,"UU","CAP2","S",1723744992.3388),
::toPick(301,"UU","ICF","S",1723744992.4312),
::toPick(302,"UU","SWUT","P",1723744992.6103),
::toPick(303,"UU","OWUT","P",1723744992.6835),
::toPick(304,"UU","TPU","S",1723744993.0139),
::toPick(305,"UU","OPS","P",1723744993.0363),
::toPick(306,"UU","ETW","P",1723744993.1242),
::toPick(307,"UU","ELE","P",1723744993.3091),
::toPick(308,"UU","FTT","S",1723744993.3628),
::toPick(309,"UU","WCF","S",1723744993.7492),
::toPick(310,"UU","SSC","P",1723744994.1344),
::toPick(311,"UU","TMU","P",1723744994.3226),
::toPick(312,"UU","WES","P",1723744994.3744),
::toPick(313,"UU","UHP","S",1723744994.3981),
::toPick(314,"UU","JRP","P",1723744994.5612),
::toPick(315,"UU","MGCU","S",1723744994.7076),
::toPick(316,"UU","CTU","S",1723744994.7999),
::toPick(317,"UU","BYP","P",1723744994.8533),
::toPick(318,"UU","MOR","S",1723744994.9709),
::toPick(319,"UU","TPU","P",1723744995.0402),
::toPick(320,"UU","OCP","P",1723744995.0639),
::toPick(321,"UU","UHP","P",1723744995.433),
::toPick(322,"UU","WPUT","P",1723744995.7051),
::toPick(323,"UU","FOR1","S",1723744995.7519),
::toPick(324,"UU","SCY","P",1723744995.8008),
::toPick(325,"UU","CVRU","P",1723744995.8641),
::toPick(326,"UU","FORK","P",1723744996.0221),
::toPick(327,"UU","WHS","P",1723744996.0794),
::toPick(328,"UU","WES","S",1723744996.4229),
::toPick(329,"UU","CVRU","S",1723744996.6019),
::toPick(330,"UU","TMU","S",1723744996.7228),
::toPick(331,"UU","PTU","P",1723744996.8558),
::toPick(332,"UU","MHS2","S",1723744997.2338),
::toPick(333,"UU","SWUT","S",1723744997.446),
::toPick(334,"UU","RCJ","S",1723744997.4522),
::toPick(335,"UU","ZNPU","S",1723744997.4854),
::toPick(336,"UU","IAE","P",1723744997.7451),
::toPick(337,"UU","FORU","S",1723744997.8775),
::toPick(338,"UU","SNUT","P",1723744998.1742),
::toPick(339,"UU","BYP","P",1723744998.3258),
::toPick(340,"UU","PSUT","P",1723744998.5036),
::toPick(341,"UU","SGU","S",1723744998.5808),
::toPick(342,"UU","AVE","P",1723744999.0281),
::toPick(343,"UU","DBD","P",1723744999.2975),
::toPick(344,"UU","FORK","S",1723744999.4064),
::toPick(345,"UU","EOCU","S",1723744999.5892),
::toPick(346,"UU","KCBD","P",1723744999.698),
::toPick(347,"UU","NMU","S",1723744999.811),
::toPick(348,"UU","LRG","P",1723744999.8452),
::toPick(349,"UU","RRCU","P",1723745000.4261),
::toPick(350,"UU","CCUT","P",1723745000.6992),
::toPick(351,"UU","WHS","P",1723745000.8337),
::toPick(352,"UU","GMO","S",1723745001.0891),
::toPick(353,"UU","PTU","P",1723745001.241),
::toPick(354,"UU","ALT","S",1723745001.2662),
::toPick(355,"UU","AVE","P",1723745001.5104),
::toPick(356,"UU","TMU","P",1723745001.5409),
::toPick(357,"UU","HER","S",1723745001.6522),
::toPick(358,"UU","BYP","P",1723745001.7914),
::toPick(359,"UU","VEC","S",1723745002.2111),
::toPick(360,"UU","RCJ","P",1723745002.2663),
::toPick(361,"UU","RPF","S",1723745002.5464),
::toPick(362,"UU","FORW","S",1723745002.5768),
::toPick(363,"UU","SNUT","P",1723745002.7865),
::toPick(364,"UU","OPS","P",1723745002.8635),
::toPick(365,"UU","HDUT","S",1723745002.9851),
::toPick(366,"UU","LCMT","P",1723745003.3828),
::toPick(367,"UU","HRU","P",1723745003.3956),
::toPick(368,"UU","WTU","P",1723745003.5252),
::toPick(369,"UU","SRU","P",1723745003.6906),
::toPick(370,"UU","ALT","P",1723745003.8711),
::toPick(371,"UU","EOCU","P",1723745004.123),
::toPick(372,"UU","TCRU","S",1723745004.2016),
::toPick(373,"UU","KHUT","P",1723745004.5914),
::toPick(374,"UU","SNUT","P",1723745004.8355),
::toPick(375,"UU","SZCU","P",1723745005.1499),
::toPick(376,"UU","MGCU","P",1723745005.4076),
::toPick(377,"UU","SNUT","P",1723745005.8116),
::toPick(378,"UU","HES","P",1723745005.889),
::toPick(379,"UU","FSU","S",1723745005.9873),
::toPick(380,"UU","MID","S",1723745006.1237),
::toPick(381,"UU","MOR","P",1723745006.153),
::toPick(382,"UU","SCS","P",1723745006.2652),
::toPick(383,"UU","MMU","S",1723745006.392),
::toPick(384,"UU","TPU","P",1723745006.5666),
::toPick(385,"UU","EKU","S",1723745006.7499),
::toPick(386,"UU","SNUT","P",1723745006.9136),
::toPick(387,"UU","CAP2","P",1723745006.9371),
::toPick(388,"UU","ALP","S",1723745007.1217),
::toPick(389,"UU","WHS","P",1723745007.1848),
::toPick(390,"UU","MID","P",1723745007.1895),
::toPick(391,"UU","UHP","P",1723745007.2095),
::toPick(392,"UU","BRPU","P",1723745007.5419),
::toPick(393,"UU","SPR2","P",1723745007.9024),
::toPick(394,"UU","WCF","S",1723745008.3146),
::toPick(395,"UU","CTU","P",1723745008.3391),
::toPick(396,"UU","MTPU","P",1723745008.9322),
::toPick(397,"UU","PTU","P",1723745009.0094),
::toPick(398,"UU","MAB","S",1723745009.0111),
::toPick(399,"UU","LCU","P",1723745009.0748),
::toPick(400,"UU","NLU","S",1723745009.2495),
::toPick(401,"UU","UHP","P",1723745009.7163),
::toPick(402,"UU","LGC","S",1723745009.7568),
::toPick(403,"UU","NLU","S",1723745010.0481),
::toPick(404,"UU","GMO","S",1723745010.1222),
::toPick(405,"UU","SCY","P",1723745010.1461),
::toPick(406,"UU","MGCU","S",1723745010.257),
::toPick(407,"UU","BYP","S",1723745010.4714),
::toPick(408,"UU","WES","S",1723745010.5288),
::toPick(409,"UU","PTU","P",1723745010.7852),
::toPick(410,"UU","SNUT","P",1723745010.9421),
::toPick(411,"UU","LIUT","P",1723745011.0117),
::toPick(412,"UU","LGC","P",1723745012.189),
::toPick(413,"UU","WCF","S",1723745012.4632),
::toPick(414,"UU","BCE","P",1723745012.8582),
::toPick(415,"UU","NMU","P",1723745013.1534),
::toPick(416,"UU","UTH","P",1723745013.1821),
::toPick(417,"UU","WBC","P",1723745013.4241),
::toPick(418,"UU","WHS","S",1723745013.5911),
::toPick(419,"UU","MHS2","S",1723745013.769),
::toPick(420,"UU","LRG","P",1723745014.0472),
::toPick(421,"UU","LSU","P",1723745014.0876),
::toPick(422,"UU","WCO","S",1723745014.7991),
::toPick(423,"UU","HER","S",1723745015.0935),
::toPick(424,"UU","WBC","P",1723745015.2669),
::toPick(425,"UU","WDO","P",1723745015.4091),
::toPick(426,"UU","SPR2","S",1723745015.5537),
::toPick(427,"UU","WTU","S",1723745015.8065),
::toPick(428,"UU","LCU","P",1723745015.8182),
::toPick(429,"UU","UHP","P",1723745015.8996),
::toPick(430,"UU","WHS","P",1723745016.7025),
::toPick(431,"UU","MGCU","S",1723745017.5927),
::toPick(432,"UU","GMO","S",1723745017.6297),
::toPick(433,"UU","SPR2","P",1723745018.2213),
::toPick(434,"UU","SPR2","S",1723745018.2814),
::toPick(435,"US","ELK","P",1723745018.425),
::toPick(436,"UU","GMU","P",1723745018.5519),
::toPick(437,"UU","TPU","P",1723745018.7841),
::toPick(438,"UU","HAFB","S",1723745018.9261),
::toPick(439,"UU","LSU","P",1723745020.0804),
::toPick(440,"UU","UHP","P",1723745020.2918),
::toPick(441,"UU","KNB","P",1723745020.4554),
::toPick(442,"UU","VEC","S",1723745021.0159),
::toPick(443,"UU","RCJ","P",1723745021.6015),
::toPick(444,"UU","BSS","P",1723745021.6427),
::toPick(445,"UU","RCJ","S",1723745021.6469),
::toPick(446,"UU","SPU","S",1723745021.7526),
::toPick(447,"UU","HTU","P",1723745021.8842),
::toPick(448,"UU","FTT","S",1723745022.2443),
::toPick(449,"UU","WES","P",1723745022.8569),
::toPick(450,"UU","SHED","P",1723745023.074),
::toPick(451,"UU","FTT","P",1723745023.2301),
::toPick(452,"UU","SPR2","S",1723745023.6581),
::toPick(453,"UU","SNUT","P",1723745023.8943),
::toPick(454,"UU","PEUT","P",1723745023.9099),
::toPick(455,"UU","KHUT","P",1723745024.4721),
::toPick(456,"UU","SNUT","P",1723745024.889),
::toPick(457,"UU","TPU","S",1723745024.9268),
::toPick(458,"UU","CVRU","S",1723745025.3639),
::toPick(459,"UU","CVH","S",1723745025.3721),
::toPick(460,"UU","LSU","P",1723745025.7059),
::toPick(461,"UU","WCF","S",1723745026.0331),
::toPick(462,"UU","BSS","S",1723745026.1196),
::toPick(463,"UU","ALT","P",1723745026.2581),
::toPick(464,"UU","WES","P",1723745027.4391),
::toPick(465,"UU","SGU","S",1723745027.5781),
::toPick(466,"UU","EOCU","S",1723745027.7751),
::toPick(467,"UU","PCR","P",1723745027.9144),
::toPick(468,"UU","SCUT","P",1723745027.9957),
::toPick(469,"UU","CAP2","S",1723745028.0452),
::toPick(470,"UU","KHUT","P",1723745028.6265),
::toPick(471,"UU","LRG","P",1723745029.0055),
::toPick(472,"UU","SNUT","P",1723745029.0148),
::toPick(473,"UU","SWUT","S",1723745029.0426),
::toPick(474,"UU","GMO","S",1723745029.406),
::toPick(475,"UU","OPS","P",1723745029.8149),
::toPick(476,"UU","DOT","S",1723745030.0778),
::toPick(477,"UU","HAFB","S",1723745030.2698),
::toPick(478,"UU","GMO","S",1723745031.2971),
::toPick(479,"UU","WBC","P",1723745031.5113),
::toPick(480,"UU","FTT","S",1723745031.7631),
::toPick(481,"UU","GMO","P",1723745032.2181),
::toPick(482,"UU","WMUT","P",1723745032.2408),
::toPick(483,"UU","SNUT","P",1723745032.5357),
::toPick(484,"UU","HRU","P",1723745032.6782),
::toPick(485,"UU","UHP","P",1723745032.702),
::toPick(486,"UU","AMF","S",1723745033.1028),
::toPick(487,"UU","MOR","S",1723745033.1384),
::toPick(488,"UU","JRP","P",1723745033.7045),
::toPick(489,"UU","LCU","P",1723745034.0908),
::toPick(490,"UU","JRP","S",1723745034.7764),
::toPick(491,"UU","WPUT","P",1723745034.8681),
::toPick(492,"UU","LRG","S",1723745034.8907),
::toPick(493,"UU","HRU","P",1723745035.4929),
::toPick(494,"UU","HTU","P",1723745036.476),
::toPick(495,"UU","MGCU","S",1723745036.5226),
::toPick(496,"UU","HES","P",1723745036.6654),
::toPick(497,"UU","PEUT","S",1723745036.6725),
::toPick(498,"UU","IAE","P",1723745036.914),
::toPick(499,"UU","OPS","P",1723745037.1852),
::toPick(500,"UU","GZU","S",1723745037.8439),
::toPick(501,"UU","ELE","S",1723745038.0752),
::toPick(502,"UU","MGCU","P",1723745039.2968),
::toPick(503,"UU","CVRU","S",1723745039.5854),
::toPick(504,"UU","SRU","P",1723745039.7158),
::toPick(505,"UU","UHP","P",1723745039.9846)
    };
    return picks;
}

}

TEST(AssociatorsPhaseLink, Pick)
{
    Pick pick;
    pick.setNetwork("UU");
    pick.setStation("CWU");
    pick.setPhase(Pick::Phase::S);
    pick.setTime(1349131125.0860946);
    pick.setIdentifier(122);

    Pick copy(pick);
    EXPECT_EQ(copy.getNetwork(), "UU");
    EXPECT_EQ(copy.getStation(), "CWU");
    EXPECT_EQ(copy.getPhase(), Pick::Phase::S);
    EXPECT_NEAR(copy.getTime(), 1349131125.0860946, 1.e-4);
    EXPECT_EQ(*copy.getIdentifier(), 122);
}

TEST(AssociatorsPhaseLink, Arrival)
{
    Pick pick;
    pick.setNetwork("UU");
    pick.setStation("CWU");
    pick.setPhase(Pick::Phase::S);
    pick.setTime(1349131125.0860946);
    pick.setIdentifier(122);

    Arrival arrival(pick);
    arrival.setProbability(0.94);
    EXPECT_EQ(arrival.getNetwork(), "UU");
    EXPECT_EQ(arrival.getStation(), "CWU");
    EXPECT_EQ(arrival.getPhase(), Arrival::Phase::S);
    EXPECT_NEAR(arrival.getTime(), 1349131125.0860946, 1.e-4);
    EXPECT_EQ(*arrival.getIdentifier(), 122);
    EXPECT_TRUE(std::abs(*arrival.getProbability() -  0.94) < 1.e-10);
}

TEST(AssociatorsPhaseLink, RealLife)
{
    Inference inference(Region::Utah);
    inference.load(utahModel);
    auto picks = realLife(); 
auto clusters = inference.associate(picks, 10, 0.5);
getchar();
}

TEST(AssociatorsPhaseLink, UtahInference)
{
    Inference inference(Region::Utah);
    EXPECT_EQ(inference.getNumberOfFeatures(), 5);
    EXPECT_EQ(inference.getSimulationSize(), 1000);

    inference.load(utahModel);
    std::vector<double> X(1000*5, 0.0);
    std::vector<double> Xwork{0.403565,0.384886,0.0,0.0,0.0,
                              0.379272,0.374152,0.0002778629461924235,0.0,0.0,
                              0.400962,0.354218,0.01470469832420349,0.0,0.0,
                              0.427383,0.383652,0.01926674246788025,0.0,0.0,
                              0.457935,0.365838,0.03884924451510111,0.0,0.0,
                              0.391526,0.324157,0.044431016842524214,0.0,0.0,
                              0.450868,0.335365,0.05695272882779439,0.0,0.0,
                              0.339476,0.319236,0.06611587802569072,0.0,0.0,
                              0.495701,0.389886,0.06886587738990783,0.0,0.0,
                              0.384406,0.300186,0.06911587913831076,0.0,0.0,
                              0.446325,0.439806,0.07194157441457112,0.0,0.0,
                              0.407249,0.45774,0.07913171648979186,0.0,0.0,
                              0.507997,0.361957,0.07993676463762919,0.0,0.0,
                              0.288915,0.421232,0.08384335438410441,0.0,0.0,
                              0.515842,0.360667,0.08543010354042054,0.0,0.0,
                              0.446524,0.29894,0.08711087306340536,0.0,0.0,
                              0.453041,0.467774,0.09908669392267863,0.0,0.0,
                              0.510023,0.319689,0.1011992116769155,0.0,0.0,
                              0.539121,0.390023,0.10567780335744222,0.0,0.0,
                              0.34996,0.256574,0.1187949518362681,0.0,0.0,
                              0.425045,0.239718,0.13767133553822836,0.0,0.0,
                              0.427749,0.212291,0.16904423236846924,0.0,0.0,
                              0.193939,0.490133,0.1818803608417511,0.0,0.0,
                              0.493679,0.552162,0.19951353073120118,0.0,0.0};
    /*
    std::vector<double> refProbabilities
    {
        0.99900717,0.9669727, 0.9516068, 0.94454986,0.94161916,0.94305223,
        0.9409335, 0.9468487, 0.9495476, 0.94515014,0.95276326,0.958388,
        0.9511834, 0.9508108, 0.94603825,0.93780273,0.9464146, 0.9413374,
        0.931256,  0.92510706,0.92678374,0.9182009, 0.9025983, 0.8686945,
        0.05338312
    };
    */
    std::vector<float> referenceProbability{9.99891e-01,8.78530e-01,8.62535e-01,7.97040e-01,7.67815e-01,8.93863e-01,8.12811e-01,9.57128e-01,6.49206e-01,9.57468e-01,
           9.75121e-01,9.92231e-01,5.10541e-01,9.85790e-01,5.80560e-01,9.78589e-01,9.62494e-01,8.75039e-01,6.32247e-01,9.50664e-01,
           9.16725e-01,7.97725e-01,7.73638e-01,5.21251e-01,2.36672e-03,2.99969e-04,9.43990e-05,5.07295e-05,3.68110e-05,3.25902e-05,
           3.20194e-05,3.21499e-05,3.26513e-05,3.29033e-05,3.15897e-05,2.86334e-05,2.47810e-05,2.07408e-05,1.69865e-05,1.37589e-05,
           1.11240e-05,9.04457e-06,7.43760e-06,6.21005e-06,5.27691e-06,4.56801e-06,4.02860e-06,3.61738e-06,3.30365e-06,3.06460e-06,
           2.88322e-06,2.74665e-06,2.64501e-06,2.57056e-06,2.51715e-06,2.47981e-06,2.45449e-06,2.43781e-06,2.42694e-06,2.41949e-06,
           2.41337e-06,2.40683e-06,2.39834e-06,2.38662e-06,2.37064e-06,2.34959e-06,2.32294e-06,2.29042e-06,2.25202e-06,2.20799e-06,
           2.15877e-06,2.10501e-06,2.04747e-06,1.98699e-06,1.92442e-06,1.86062e-06,1.79638e-06,1.73240e-06,1.66931e-06,1.60761e-06,
           1.54771e-06,1.48991e-06,1.43446e-06,1.38147e-06,1.33104e-06,1.28318e-06,1.23789e-06,1.19510e-06,1.15474e-06,1.11672e-06,
           1.08092e-06,1.04725e-06,1.01558e-06,9.85810e-07,9.57809e-07,9.31477e-07,9.06710e-07,8.83403e-07,8.61464e-07,8.40800e-07,
           8.21332e-07,8.02984e-07,7.85677e-07,7.69344e-07,7.53926e-07,7.39363e-07,7.25596e-07,7.12582e-07,7.00268e-07,6.88615e-07,
           6.77580e-07,6.67128e-07,6.57222e-07,6.47830e-07,6.38924e-07,6.30473e-07,6.22454e-07,6.14842e-07,6.07613e-07,6.00748e-07,
           5.94227e-07,5.88031e-07,5.82142e-07,5.76547e-07,5.71229e-07,5.66173e-07,5.61368e-07,5.56801e-07,5.52461e-07,5.48336e-07,
           5.44417e-07,5.40694e-07,5.37157e-07,5.33799e-07,5.30612e-07,5.27587e-07,5.24718e-07,5.21998e-07,5.19422e-07,5.16983e-07,
           5.14674e-07,5.12491e-07,5.10429e-07,5.08484e-07,5.06650e-07,5.04923e-07,5.03299e-07,5.01773e-07,5.00343e-07,4.99007e-07,
           4.97758e-07,4.96594e-07,4.95512e-07,4.94510e-07,4.93585e-07,4.92732e-07,4.91952e-07,4.91242e-07,4.90596e-07,4.90015e-07,
           4.89497e-07,4.89038e-07,4.88638e-07,4.88296e-07,4.88006e-07,4.87770e-07,4.87585e-07,4.87450e-07,4.87361e-07,4.87319e-07,
           4.87323e-07,4.87370e-07,4.87460e-07,4.87590e-07,4.87761e-07,4.87969e-07,4.88214e-07,4.88496e-07,4.88813e-07,4.89165e-07,
           4.89549e-07,4.89965e-07,4.90411e-07,4.90888e-07,4.91394e-07,4.91929e-07,4.92492e-07,4.93079e-07,4.93694e-07,4.94332e-07,
           4.94996e-07,4.95683e-07,4.96390e-07,4.97122e-07,4.97875e-07,4.98647e-07,4.99441e-07,5.00252e-07,5.01083e-07,5.01931e-07,
           5.02796e-07,5.03679e-07,5.04579e-07,5.05490e-07,5.06422e-07,5.07365e-07,5.08322e-07,5.09294e-07,5.10278e-07,5.11274e-07,
           5.12282e-07,5.13302e-07,5.14334e-07,5.15373e-07,5.16425e-07,5.17487e-07,5.18557e-07,5.19636e-07,5.20724e-07,5.21821e-07,
           5.22922e-07,5.24033e-07,5.25150e-07,5.26273e-07,5.27402e-07,5.28536e-07,5.29678e-07,5.30824e-07,5.31973e-07,5.33127e-07,
           5.34286e-07,5.35448e-07,5.36613e-07,5.37783e-07,5.38954e-07,5.40128e-07,5.41304e-07,5.42484e-07,5.43662e-07,5.44843e-07,
           5.46027e-07,5.47211e-07,5.48395e-07,5.49581e-07,5.50765e-07,5.51949e-07,5.53133e-07,5.54318e-07,5.55502e-07,5.56685e-07,
           5.57867e-07,5.59046e-07,5.60226e-07,5.61405e-07,5.62580e-07,5.63754e-07,5.64927e-07,5.66096e-07,5.67263e-07,5.68428e-07,
           5.69588e-07,5.70749e-07,5.71905e-07,5.73058e-07,5.74207e-07,5.75353e-07,5.76495e-07,5.77635e-07,5.78770e-07,5.79902e-07,
           5.81030e-07,5.82153e-07,5.83274e-07,5.84388e-07,5.85500e-07,5.86606e-07,5.87709e-07,5.88807e-07,5.89900e-07,5.90988e-07,
           5.92072e-07,5.93152e-07,5.94226e-07,5.95297e-07,5.96359e-07,5.97420e-07,5.98475e-07,5.99523e-07,6.00567e-07,6.01605e-07,
           6.02640e-07,6.03669e-07,6.04692e-07,6.05711e-07,6.06722e-07,6.07729e-07,6.08731e-07,6.09729e-07,6.10720e-07,6.11708e-07,
           6.12686e-07,6.13661e-07,6.14631e-07,6.15597e-07,6.16555e-07,6.17510e-07,6.18457e-07,6.19400e-07,6.20338e-07,6.21269e-07,
           6.22194e-07,6.23117e-07,6.24032e-07,6.24943e-07,6.25847e-07,6.26747e-07,6.27642e-07,6.28530e-07,6.29415e-07,6.30294e-07,
           6.31168e-07,6.32034e-07,6.32897e-07,6.33756e-07,6.34608e-07,6.35456e-07,6.36298e-07,6.37136e-07,6.37967e-07,6.38797e-07,
           6.39619e-07,6.40435e-07,6.41248e-07,6.42055e-07,6.42859e-07,6.43659e-07,6.44452e-07,6.45240e-07,6.46024e-07,6.46800e-07,
           6.47576e-07,6.48346e-07,6.49110e-07,6.49871e-07,6.50628e-07,6.51379e-07,6.52126e-07,6.52869e-07,6.53610e-07,6.54342e-07,
           6.55073e-07,6.55798e-07,6.56519e-07,6.57235e-07,6.57950e-07,6.58659e-07,6.59366e-07,6.60066e-07,6.60761e-07,6.61455e-07,
           6.62144e-07,6.62830e-07,6.63512e-07,6.64189e-07,6.64864e-07,6.65533e-07,6.66201e-07,6.66863e-07,6.67522e-07,6.68177e-07,
           6.68830e-07,6.69479e-07,6.70125e-07,6.70766e-07,6.71404e-07,6.72040e-07,6.72671e-07,6.73300e-07,6.73926e-07,6.74548e-07,
           6.75167e-07,6.75781e-07,6.76395e-07,6.77004e-07,6.77612e-07,6.78216e-07,6.78815e-07,6.79413e-07,6.80009e-07,6.80601e-07,
           6.81190e-07,6.81776e-07,6.82361e-07,6.82942e-07,6.83520e-07,6.84096e-07,6.84669e-07,6.85238e-07,6.85807e-07,6.86373e-07,
           6.86935e-07,6.87495e-07,6.88054e-07,6.88609e-07,6.89162e-07,6.89712e-07,6.90261e-07,6.90807e-07,6.91351e-07,6.91892e-07,
           6.92431e-07,6.92969e-07,6.93504e-07,6.94037e-07,6.94568e-07,6.95097e-07,6.95624e-07,6.96146e-07,6.96669e-07,6.97192e-07,
           6.97710e-07,6.98226e-07,6.98739e-07,6.99255e-07,6.99765e-07,7.00275e-07,7.00781e-07,7.01287e-07,7.01790e-07,7.02293e-07,
           7.02794e-07,7.03295e-07,7.03790e-07,7.04286e-07,7.04780e-07,7.05274e-07,7.05763e-07,7.06251e-07,7.06740e-07,7.07226e-07,
           7.07711e-07,7.08195e-07,7.08678e-07,7.09158e-07,7.09637e-07,7.10114e-07,7.10589e-07,7.11064e-07,7.11538e-07,7.12011e-07,
           7.12481e-07,7.12951e-07,7.13419e-07,7.13885e-07,7.14352e-07,7.14815e-07,7.15279e-07,7.15741e-07,7.16202e-07,7.16662e-07,
           7.17119e-07,7.17578e-07,7.18036e-07,7.18491e-07,7.18944e-07,7.19398e-07,7.19851e-07,7.20303e-07,7.20753e-07,7.21202e-07,
           7.21652e-07,7.22098e-07,7.22544e-07,7.22990e-07,7.23436e-07,7.23879e-07,7.24322e-07,7.24763e-07,7.25205e-07,7.25644e-07,
           7.26084e-07,7.26524e-07,7.26961e-07,7.27397e-07,7.27833e-07,7.28270e-07,7.28704e-07,7.29139e-07,7.29574e-07,7.30004e-07,
           7.30438e-07,7.30869e-07,7.31298e-07,7.31729e-07,7.32159e-07,7.32588e-07,7.33014e-07,7.33442e-07,7.33869e-07,7.34296e-07,
           7.34722e-07,7.35146e-07,7.35571e-07,7.35996e-07,7.36418e-07,7.36842e-07,7.37263e-07,7.37686e-07,7.38109e-07,7.38530e-07,
           7.38952e-07,7.39371e-07,7.39793e-07,7.40211e-07,7.40632e-07,7.41050e-07,7.41468e-07,7.41886e-07,7.42303e-07,7.42720e-07,
           7.43137e-07,7.43556e-07,7.43971e-07,7.44386e-07,7.44802e-07,7.45218e-07,7.45634e-07,7.46048e-07,7.46463e-07,7.46880e-07,
           7.47294e-07,7.47706e-07,7.48122e-07,7.48536e-07,7.48950e-07,7.49361e-07,7.49777e-07,7.50191e-07,7.50603e-07,7.51015e-07,
           7.51429e-07,7.51841e-07,7.52255e-07,7.52667e-07,7.53080e-07,7.53493e-07,7.53904e-07,7.54319e-07,7.54732e-07,7.55143e-07,
           7.55556e-07,7.55971e-07,7.56384e-07,7.56797e-07,7.57209e-07,7.57623e-07,7.58036e-07,7.58450e-07,7.58864e-07,7.59278e-07,
           7.59690e-07,7.60104e-07,7.60520e-07,7.60933e-07,7.61350e-07,7.61765e-07,7.62182e-07,7.62596e-07,7.63012e-07,7.63429e-07,
           7.63844e-07,7.64261e-07,7.64679e-07,7.65097e-07,7.65514e-07,7.65934e-07,7.66352e-07,7.66772e-07,7.67191e-07,7.67612e-07,
           7.68032e-07,7.68453e-07,7.68876e-07,7.69298e-07,7.69721e-07,7.70145e-07,7.70570e-07,7.70993e-07,7.71419e-07,7.71845e-07,
           7.72272e-07,7.72700e-07,7.73129e-07,7.73556e-07,7.73986e-07,7.74418e-07,7.74848e-07,7.75282e-07,7.75714e-07,7.76149e-07,
           7.76583e-07,7.77017e-07,7.77455e-07,7.77893e-07,7.78333e-07,7.78772e-07,7.79215e-07,7.79653e-07,7.80097e-07,7.80540e-07,
           7.80987e-07,7.81432e-07,7.81879e-07,7.82328e-07,7.82778e-07,7.83230e-07,7.83683e-07,7.84137e-07,7.84593e-07,7.85050e-07,
           7.85507e-07,7.85967e-07,7.86429e-07,7.86888e-07,7.87355e-07,7.87819e-07,7.88286e-07,7.88755e-07,7.89226e-07,7.89698e-07,
           7.90172e-07,7.90648e-07,7.91126e-07,7.91607e-07,7.92085e-07,7.92571e-07,7.93055e-07,7.93543e-07,7.94031e-07,7.94523e-07,
           7.95015e-07,7.95513e-07,7.96010e-07,7.96511e-07,7.97013e-07,7.97515e-07,7.98026e-07,7.98535e-07,7.99045e-07,7.99560e-07,
           8.00078e-07,8.00595e-07,8.01121e-07,8.01645e-07,8.02174e-07,8.02702e-07,8.03237e-07,8.03772e-07,8.04311e-07,8.04854e-07,
           8.05398e-07,8.05948e-07,8.06500e-07,8.07054e-07,8.07613e-07,8.08173e-07,8.08739e-07,8.09309e-07,8.09879e-07,8.10455e-07,
           8.11033e-07,8.11618e-07,8.12202e-07,8.12793e-07,8.13386e-07,8.13983e-07,8.14587e-07,8.15193e-07,8.15801e-07,8.16418e-07,
           8.17037e-07,8.17661e-07,8.18286e-07,8.18917e-07,8.19553e-07,8.20195e-07,8.20842e-07,8.21489e-07,8.22146e-07,8.22805e-07,
           8.23474e-07,8.24142e-07,8.24818e-07,8.25499e-07,8.26185e-07,8.26875e-07,8.27574e-07,8.28275e-07,8.28984e-07,8.29698e-07,
           8.30418e-07,8.31144e-07,8.31874e-07,8.32614e-07,8.33357e-07,8.34107e-07,8.34863e-07,8.35627e-07,8.36395e-07,8.37172e-07,
           8.37956e-07,8.38745e-07,8.39542e-07,8.40346e-07,8.41157e-07,8.41976e-07,8.42799e-07,8.43634e-07,8.44474e-07,8.45321e-07,
           8.46176e-07,8.47040e-07,8.47912e-07,8.48793e-07,8.49679e-07,8.50574e-07,8.51479e-07,8.52392e-07,8.53314e-07,8.54245e-07,
           8.55183e-07,8.56129e-07,8.57086e-07,8.58053e-07,8.59028e-07,8.60012e-07,8.61006e-07,8.62010e-07,8.63023e-07,8.64046e-07,
           8.65079e-07,8.66122e-07,8.67174e-07,8.68240e-07,8.69312e-07,8.70396e-07,8.71492e-07,8.72596e-07,8.73712e-07,8.74840e-07,
           8.75978e-07,8.77128e-07,8.78287e-07,8.79460e-07,8.80644e-07,8.81838e-07,8.83047e-07,8.84267e-07,8.85497e-07,8.86738e-07,
           8.87995e-07,8.89262e-07,8.90545e-07,8.91835e-07,8.93139e-07,8.94458e-07,8.95789e-07,8.97134e-07,8.98489e-07,8.99860e-07,
           9.01242e-07,9.02639e-07,9.04052e-07,9.05476e-07,9.06914e-07,9.08363e-07,9.09830e-07,9.11309e-07,9.12802e-07,9.14311e-07,
           9.15833e-07,9.17371e-07,9.18922e-07,9.20486e-07,9.22068e-07,9.23663e-07,9.25273e-07,9.26897e-07,9.28538e-07,9.30195e-07,
           9.31864e-07,9.33549e-07,9.35250e-07,9.36966e-07,9.38695e-07,9.40441e-07,9.42204e-07,9.43981e-07,9.45774e-07,9.47586e-07,
           9.49409e-07,9.51250e-07,9.53104e-07,9.54977e-07,9.56864e-07,9.58766e-07,9.60686e-07,9.62621e-07,9.64570e-07,9.66537e-07,
           9.68518e-07,9.70516e-07,9.72531e-07,9.74560e-07,9.76603e-07,9.78666e-07,9.80741e-07,9.82831e-07,9.84939e-07,9.87059e-07,
           9.89197e-07,9.91349e-07,9.93517e-07,9.95698e-07,9.97894e-07,1.00011e-06,1.00233e-06,1.00457e-06,1.00682e-06,1.00909e-06,
           1.01137e-06,1.01367e-06,1.01598e-06,1.01830e-06,1.02064e-06,1.02298e-06,1.02534e-06,1.02771e-06,1.03010e-06,1.03249e-06,
           1.03489e-06,1.03731e-06,1.03973e-06,1.04217e-06,1.04461e-06,1.04707e-06,1.04953e-06,1.05200e-06,1.05448e-06,1.05696e-06,
           1.05945e-06,1.06195e-06,1.06445e-06,1.06695e-06,1.06947e-06,1.07198e-06,1.07449e-06,1.07701e-06,1.07953e-06,1.08205e-06,
           1.08456e-06,1.08708e-06,1.08960e-06,1.09211e-06,1.09461e-06,1.09712e-06,1.09961e-06,1.10210e-06,1.10458e-06,1.10705e-06,
           1.10951e-06,1.11196e-06,1.11440e-06,1.11682e-06,1.11923e-06,1.12162e-06,1.12399e-06,1.12635e-06,1.12868e-06,1.13099e-06,
           1.13328e-06,1.13554e-06,1.13778e-06,1.13999e-06,1.14217e-06,1.14431e-06,1.14643e-06,1.14851e-06,1.15055e-06,1.15256e-06,
           1.15452e-06,1.15645e-06,1.15833e-06,1.16017e-06,1.16196e-06,1.16370e-06,1.16540e-06,1.16704e-06,1.16862e-06,1.17015e-06,
           1.17163e-06,1.17304e-06,1.17440e-06,1.17569e-06,1.17692e-06,1.17808e-06,1.17917e-06,1.18020e-06,1.18116e-06,1.18204e-06,
           1.18285e-06,1.18359e-06,1.18425e-06,1.18484e-06,1.18535e-06,1.18578e-06,1.18613e-06,1.18640e-06,1.18660e-06,1.18671e-06,
           1.18675e-06,1.18670e-06,1.18658e-06,1.18638e-06,1.18610e-06,1.18574e-06,1.18531e-06,1.18480e-06,1.18422e-06,1.18357e-06,
           1.18285e-06,1.18206e-06,1.18121e-06,1.18030e-06,1.17933e-06,1.17830e-06,1.17722e-06,1.17608e-06,1.17491e-06,1.17368e-06,
           1.17242e-06,1.17111e-06,1.16977e-06,1.16839e-06,1.16698e-06,1.16553e-06,1.16405e-06,1.16254e-06,1.16099e-06,1.15940e-06,
           1.15777e-06,1.15608e-06,1.15435e-06,1.15254e-06,1.15066e-06,1.14870e-06,1.14664e-06,1.14446e-06,1.14214e-06,1.13967e-06,
           1.13703e-06,1.13419e-06,1.13112e-06,1.12781e-06,1.12423e-06,1.12035e-06,1.11615e-06,1.11160e-06,1.10668e-06,1.10136e-06,
           1.09563e-06,1.08946e-06,1.08282e-06,1.07566e-06,1.06790e-06,1.05939e-06,1.04981e-06,1.03866e-06,1.02525e-06,1.00873e-06,
           9.88381e-07,9.63993e-07,9.36114e-07,9.05739e-07,8.72909e-07,8.34171e-07,7.80759e-07,7.02026e-07,5.98168e-07,4.90156e-07,
           4.01256e-07,3.37713e-07,2.95529e-07,2.70221e-07,2.60056e-07,2.68060e-07,3.05688e-07,3.96802e-07,5.95501e-07,1.31087e-06};
    std::copy(Xwork.begin(), Xwork.end(), X.begin());
    for (int i = 24; i < 1000; ++i)
    {
        X[5*i + 4] = 1;
    }
                            
    auto result = inference.predictProbability(X);
    for (size_t i = 0; i < referenceProbability.size(); ++i)
    {
        EXPECT_TRUE(std::abs(result[i] - referenceProbability[i]) < 1.e-5);
    }
/*
std::cout << result.size() << std::endl;
for (int i =0 ; i< 9; ++i)
{
  std::cout << result[i] << std::endl;
}
result = inference.predictProbability(24, Xwork);
for (int i = 0; i < 9; ++i)
{
  std::cout << i <<  " "<< result[i] << std::endl;
}
*/

/*
    auto picks = picksFor60000197();
    auto associations = inference.associate(picks, 0.5);
    EXPECT_EQ(associations.size(), 1);
    EXPECT_EQ(associations[0].size(), picks.size());
    for (size_t iPick = 0; iPick < associations[0].size(); ++iPick)
    {
        EXPECT_NEAR(result[iPick], *associations[0][iPick].getProbability(), 1.e-4);
        EXPECT_EQ(picks[iPick].getStation(), associations[0][iPick].getStation()); 
        EXPECT_TRUE( std::abs(picks[iPick].getTime() - associations[0][iPick].getTime() ) < 1.e-4 );
        if (picks[iPick].getPhase() == Pick::Phase::P)
        {
            EXPECT_EQ(associations[0][iPick].getPhase(), Arrival::Phase::P);
        }
        else
        {
            EXPECT_EQ(associations[0][iPick].getPhase(), Arrival::Phase::S);
        }
//        std::cout << result[iPick] << " " << *associations[0][iPick].getProbability() << associations[0][iPick].getStation() << std::endl; 
    }
//getchar();
*/
}

TEST(AssociatorsPhaseLink, InvalidStation)
{
    auto eqPicks = picksFor60020494();
    auto invalidPick = eqPicks.at(0);
    invalidPick.setNetwork("XX");
    invalidPick.setStation("FAKE");
    eqPicks.push_back(invalidPick);

    Inference inference(Region::Utah);
    inference.load(utahModel);
    int minimumClusterSize = 5;
    auto associations = inference.associate(eqPicks, minimumClusterSize, 0.5);
    EXPECT_TRUE(associations.size() == 1);
    if (!associations.empty())
    {
        EXPECT_TRUE(eqPicks.size() == associations[0].size() + 1);
    }
}

TEST(AssociatorsPhaseLink, UtahInferenceChallenge)
{
    Inference inference(Region::Utah);
    inference.load(utahModel);

    auto blastPicks = picksFor60000197();
    auto pickToInsert = blastPicks[4];
    pickToInsert.setTime(blastPicks[0].getTime() - 15);
    pickToInsert.setPhase(Pick::Phase::S);
    blastPicks.push_back(pickToInsert);

    int minimumClusterSize = 5;
    auto associations = inference.associate(blastPicks, minimumClusterSize, 0.5);
    EXPECT_TRUE(associations.size() == 1);
    if (!associations.empty()){EXPECT_TRUE(associations[0].size() == 24);}
 std::cout << associations.size() << std::endl;
 std::cout << associations[0].size() << std::endl;

    // Overlap
    blastPicks = picksFor60000197();
    auto eqPicks = picksFor60020494();

    auto t0blast = blastPicks.at(0).getTime();
    auto t0eq = eqPicks.at(0).getTime();
    auto picks = picksFor60000197();
    for (auto &eqPick : eqPicks)
    {
        auto t = (eqPick.getTime() - t0eq) + t0blast + 10;
        eqPick.setTime(t);
        picks.push_back(eqPick);
    }
    
/*
    auto nPicks = static_cast<int> (picks.size());
    for (int i = 0; i < nPicks; ++i)
    {
        auto pick = picks[i];
        pick.setTime(pick.getTime() + 20);
        picks.push_back(pick);
    }
std::cout << " " << std::endl;
std::cout << picks.size() << std::endl;
*/
    associations = inference.associate(picks, minimumClusterSize, 0.5);
    std::cout << associations.size() << std::endl;
    std::cout << associations[0].size() << std::endl;
    //getchar();
}
